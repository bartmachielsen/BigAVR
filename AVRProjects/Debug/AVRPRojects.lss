
AVRPRojects.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000066  00800100  0000043e  000004b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000043e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000548  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e96  00000000  00000000  0000062c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009c7  00000000  00000000  000014c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ec6  00000000  00000000  00001e89  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b8  00000000  00000000  00002d50  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00011482  00000000  00000000  00002f08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004f7  00000000  00000000  0001438a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00014881  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00003c11  00000000  00000000  000148f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e3       	ldi	r30, 0x3E	; 62
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 36       	cpi	r26, 0x66	; 102
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	c0 d1       	rcall	.+896    	; 0x434 <main>
  b4:	c2 c1       	rjmp	.+900    	; 0x43a <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <wait>:
#define SET_ONLY_BIT(var, pos) var = 1 << pos
#define CLEAR_ALL(var) var = 0

void wait(int ms)
{
	for (int i=0; i<ms; i++)
  b8:	18 16       	cp	r1, r24
  ba:	19 06       	cpc	r1, r25
  bc:	6c f4       	brge	.+26     	; 0xd8 <wait+0x20>
  be:	20 e0       	ldi	r18, 0x00	; 0
  c0:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	ef ec       	ldi	r30, 0xCF	; 207
  c4:	f7 e0       	ldi	r31, 0x07	; 7
  c6:	31 97       	sbiw	r30, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <wait+0xe>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <wait+0x14>
  cc:	00 00       	nop
  ce:	2f 5f       	subi	r18, 0xFF	; 255
  d0:	3f 4f       	sbci	r19, 0xFF	; 255
  d2:	28 17       	cp	r18, r24
  d4:	39 07       	cpc	r19, r25
  d6:	a9 f7       	brne	.-22     	; 0xc2 <wait+0xa>
  d8:	08 95       	ret

000000da <BlinkLedsSeperately>:
		_delay_ms( 1 );
	}
}
//	OPGAVE B2
void BlinkLedsSeperately(){
	CLEAR_ALL(PORTD);
  da:	12 ba       	out	0x12, r1	; 18
	SET_ONLY_BIT(PORTD,7);
  dc:	80 e8       	ldi	r24, 0x80	; 128
  de:	82 bb       	out	0x12, r24	; 18
	wait(500);
  e0:	84 ef       	ldi	r24, 0xF4	; 244
  e2:	91 e0       	ldi	r25, 0x01	; 1
  e4:	e9 df       	rcall	.-46     	; 0xb8 <wait>
	SET_ONLY_BIT(PORTD,6);
  e6:	80 e4       	ldi	r24, 0x40	; 64
  e8:	82 bb       	out	0x12, r24	; 18
	wait(500);
  ea:	84 ef       	ldi	r24, 0xF4	; 244
  ec:	91 e0       	ldi	r25, 0x01	; 1
  ee:	e4 cf       	rjmp	.-56     	; 0xb8 <wait>
  f0:	08 95       	ret

000000f2 <BlinkLed>:
}


void BlinkLed(int speed, int amount)
{
  f2:	ef 92       	push	r14
  f4:	ff 92       	push	r15
  f6:	0f 93       	push	r16
  f8:	1f 93       	push	r17
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
	CLEAR_ALL(PORTD);
  fe:	12 ba       	out	0x12, r1	; 18
	for(int i = 0; i < amount; i++){
 100:	16 16       	cp	r1, r22
 102:	17 06       	cpc	r1, r23
 104:	6c f4       	brge	.+26     	; 0x120 <BlinkLed+0x2e>
 106:	8b 01       	movw	r16, r22
 108:	7c 01       	movw	r14, r24
 10a:	c0 e0       	ldi	r28, 0x00	; 0
 10c:	d0 e0       	ldi	r29, 0x00	; 0
		TOGGLE_BIT(PORTD, 7);
 10e:	92 b3       	in	r25, 0x12	; 18
 110:	90 58       	subi	r25, 0x80	; 128
 112:	92 bb       	out	0x12, r25	; 18
		wait(speed);
 114:	c7 01       	movw	r24, r14
 116:	d0 df       	rcall	.-96     	; 0xb8 <wait>


void BlinkLed(int speed, int amount)
{
	CLEAR_ALL(PORTD);
	for(int i = 0; i < amount; i++){
 118:	21 96       	adiw	r28, 0x01	; 1
 11a:	c0 17       	cp	r28, r16
 11c:	d1 07       	cpc	r29, r17
 11e:	b9 f7       	brne	.-18     	; 0x10e <BlinkLed+0x1c>
		TOGGLE_BIT(PORTD, 7);
		wait(speed);
	}
}
 120:	df 91       	pop	r29
 122:	cf 91       	pop	r28
 124:	1f 91       	pop	r17
 126:	0f 91       	pop	r16
 128:	ff 90       	pop	r15
 12a:	ef 90       	pop	r14
 12c:	08 95       	ret

0000012e <LedButton>:

// OPGAVE B3
void LedButton(){			
	CLEAR_ALL(PORTD);
 12e:	12 ba       	out	0x12, r1	; 18
	while (CHECK_BIT(PINC,0))
 130:	98 9b       	sbis	0x13, 0	; 19
 132:	08 c0       	rjmp	.+16     	; 0x144 <LedButton+0x16>
	{
		TOGGLE_BIT(PORTD, 7);
 134:	82 b3       	in	r24, 0x12	; 18
 136:	80 58       	subi	r24, 0x80	; 128
 138:	82 bb       	out	0x12, r24	; 18
		wait(500);
 13a:	84 ef       	ldi	r24, 0xF4	; 244
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	bc df       	rcall	.-136    	; 0xb8 <wait>
}

// OPGAVE B3
void LedButton(){			
	CLEAR_ALL(PORTD);
	while (CHECK_BIT(PINC,0))
 140:	98 99       	sbic	0x13, 0	; 19
 142:	f8 cf       	rjmp	.-16     	; 0x134 <LedButton+0x6>
 144:	08 95       	ret

00000146 <LoopLight>:
		wait(500);
	}
}

// OPGAVE B4
void LoopLight(){
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
	for(int i = 0; i < 8; i ++){
 14e:	c0 e0       	ldi	r28, 0x00	; 0
 150:	d0 e0       	ldi	r29, 0x00	; 0
		SET_ONLY_BIT(PORTD, i);
 152:	01 e0       	ldi	r16, 0x01	; 1
 154:	10 e0       	ldi	r17, 0x00	; 0
 156:	c8 01       	movw	r24, r16
 158:	0c 2e       	mov	r0, r28
 15a:	02 c0       	rjmp	.+4      	; 0x160 <LoopLight+0x1a>
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	0a 94       	dec	r0
 162:	e2 f7       	brpl	.-8      	; 0x15c <LoopLight+0x16>
 164:	82 bb       	out	0x12, r24	; 18
		wait(50);
 166:	82 e3       	ldi	r24, 0x32	; 50
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	a6 df       	rcall	.-180    	; 0xb8 <wait>
	}
}

// OPGAVE B4
void LoopLight(){
	for(int i = 0; i < 8; i ++){
 16c:	21 96       	adiw	r28, 0x01	; 1
 16e:	c8 30       	cpi	r28, 0x08	; 8
 170:	d1 05       	cpc	r29, r1
 172:	89 f7       	brne	.-30     	; 0x156 <LoopLight+0x10>
 174:	c7 e0       	ldi	r28, 0x07	; 7
 176:	d0 e0       	ldi	r29, 0x00	; 0
		SET_ONLY_BIT(PORTD, i);
		wait(50);
	}
	for(int i = 7; i > 0; i--){
		SET_ONLY_BIT(PORTD, i);
 178:	01 e0       	ldi	r16, 0x01	; 1
 17a:	10 e0       	ldi	r17, 0x00	; 0
 17c:	c8 01       	movw	r24, r16
 17e:	0c 2e       	mov	r0, r28
 180:	02 c0       	rjmp	.+4      	; 0x186 <LoopLight+0x40>
 182:	88 0f       	add	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	0a 94       	dec	r0
 188:	e2 f7       	brpl	.-8      	; 0x182 <LoopLight+0x3c>
 18a:	82 bb       	out	0x12, r24	; 18
		wait(50);
 18c:	82 e3       	ldi	r24, 0x32	; 50
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	93 df       	rcall	.-218    	; 0xb8 <wait>
void LoopLight(){
	for(int i = 0; i < 8; i ++){
		SET_ONLY_BIT(PORTD, i);
		wait(50);
	}
	for(int i = 7; i > 0; i--){
 192:	21 97       	sbiw	r28, 0x01	; 1
 194:	99 f7       	brne	.-26     	; 0x17c <LoopLight+0x36>
		SET_ONLY_BIT(PORTD, i);
		wait(50);
	}
}
 196:	df 91       	pop	r29
 198:	cf 91       	pop	r28
 19a:	1f 91       	pop	r17
 19c:	0f 91       	pop	r16
 19e:	08 95       	ret

000001a0 <States>:

// OPGAVE B6
int States(int state){
 1a0:	0f 93       	push	r16
 1a2:	1f 93       	push	r17
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	00 d0       	rcall	.+0      	; 0x1aa <States+0xa>
 1aa:	00 d0       	rcall	.+0      	; 0x1ac <States+0xc>
 1ac:	00 d0       	rcall	.+0      	; 0x1ae <States+0xe>
 1ae:	cd b7       	in	r28, 0x3d	; 61
 1b0:	de b7       	in	r29, 0x3e	; 62
 1b2:	8c 01       	movw	r16, r24
	int speeds[] = {1000,500,250};
 1b4:	86 e0       	ldi	r24, 0x06	; 6
 1b6:	e0 e0       	ldi	r30, 0x00	; 0
 1b8:	f1 e0       	ldi	r31, 0x01	; 1
 1ba:	de 01       	movw	r26, r28
 1bc:	11 96       	adiw	r26, 0x01	; 1
 1be:	01 90       	ld	r0, Z+
 1c0:	0d 92       	st	X+, r0
 1c2:	8a 95       	dec	r24
 1c4:	e1 f7       	brne	.-8      	; 0x1be <States+0x1e>
	int maxstate = 3;

	if (CHECK_BIT(PINC,0))
 1c6:	98 9b       	sbis	0x13, 0	; 19
 1c8:	07 c0       	rjmp	.+14     	; 0x1d8 <States+0x38>
	{
		state += 1;
 1ca:	0f 5f       	subi	r16, 0xFF	; 255
 1cc:	1f 4f       	sbci	r17, 0xFF	; 255
		if(state > maxstate){
 1ce:	04 30       	cpi	r16, 0x04	; 4
 1d0:	11 05       	cpc	r17, r1
 1d2:	14 f0       	brlt	.+4      	; 0x1d8 <States+0x38>
			state = 0;
 1d4:	00 e0       	ldi	r16, 0x00	; 0
 1d6:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	BlinkLed(speeds[state],3);
 1d8:	f8 01       	movw	r30, r16
 1da:	ee 0f       	add	r30, r30
 1dc:	ff 1f       	adc	r31, r31
 1de:	ec 0f       	add	r30, r28
 1e0:	fd 1f       	adc	r31, r29
 1e2:	63 e0       	ldi	r22, 0x03	; 3
 1e4:	70 e0       	ldi	r23, 0x00	; 0
 1e6:	81 81       	ldd	r24, Z+1	; 0x01
 1e8:	92 81       	ldd	r25, Z+2	; 0x02
 1ea:	83 df       	rcall	.-250    	; 0xf2 <BlinkLed>
	return state;
}
 1ec:	c8 01       	movw	r24, r16
 1ee:	26 96       	adiw	r28, 0x06	; 6
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	f8 94       	cli
 1f4:	de bf       	out	0x3e, r29	; 62
 1f6:	0f be       	out	0x3f, r0	; 63
 1f8:	cd bf       	out	0x3d, r28	; 61
 1fa:	df 91       	pop	r29
 1fc:	cf 91       	pop	r28
 1fe:	1f 91       	pop	r17
 200:	0f 91       	pop	r16
 202:	08 95       	ret

00000204 <Pattern>:

// OPGAVE B5
void Pattern(){
 204:	8f 92       	push	r8
 206:	9f 92       	push	r9
 208:	af 92       	push	r10
 20a:	bf 92       	push	r11
 20c:	cf 92       	push	r12
 20e:	df 92       	push	r13
 210:	ef 92       	push	r14
 212:	ff 92       	push	r15
 214:	0f 93       	push	r16
 216:	1f 93       	push	r17
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	cd b7       	in	r28, 0x3d	; 61
 21e:	de b7       	in	r29, 0x3e	; 62
 220:	c0 56       	subi	r28, 0x60	; 96
 222:	d1 09       	sbc	r29, r1
 224:	0f b6       	in	r0, 0x3f	; 63
 226:	f8 94       	cli
 228:	de bf       	out	0x3e, r29	; 62
 22a:	0f be       	out	0x3f, r0	; 63
 22c:	cd bf       	out	0x3d, r28	; 61
	int array[] = {0b00000001,0b00000011,0b00000111,0b00001111,0b00011111,0b00111111,0b01111111,0b11111111,0b01111111,0b00111111,0b00011111,0b00001111,0b00000111,0b00000011,0b00000001,0b00000000};
 22e:	80 e2       	ldi	r24, 0x20	; 32
 230:	e6 e0       	ldi	r30, 0x06	; 6
 232:	f1 e0       	ldi	r31, 0x01	; 1
 234:	de 01       	movw	r26, r28
 236:	11 96       	adiw	r26, 0x01	; 1
 238:	01 90       	ld	r0, Z+
 23a:	0d 92       	st	X+, r0
 23c:	8a 95       	dec	r24
 23e:	e1 f7       	brne	.-8      	; 0x238 <Pattern+0x34>
	int array2[] = {0b00000001,0b00000011,0b00000111,0b00001111,0b00011111,0b00111111,0b01111111,0b11111111,0b11111110,0b11111100,0b11111000,0b11110000,0b11100000,0b11000000,0b10000000,0b00000000};
 240:	80 e2       	ldi	r24, 0x20	; 32
 242:	e6 e2       	ldi	r30, 0x26	; 38
 244:	f1 e0       	ldi	r31, 0x01	; 1
 246:	de 01       	movw	r26, r28
 248:	91 96       	adiw	r26, 0x21	; 33
 24a:	01 90       	ld	r0, Z+
 24c:	0d 92       	st	X+, r0
 24e:	8a 95       	dec	r24
 250:	e1 f7       	brne	.-8      	; 0x24a <Pattern+0x46>
	int array3[] = {0b00011000,0b00111100,0b01111110,0b11111111,0b11100111,0b11000011,0b10000001,0b00000000,0b10000001,0b11000011,0b11100111,0b11111111,0b01111110,0b00111100,0b00011000,0b00000000};
 252:	80 e2       	ldi	r24, 0x20	; 32
 254:	e6 e4       	ldi	r30, 0x46	; 70
 256:	f1 e0       	ldi	r31, 0x01	; 1
 258:	de 01       	movw	r26, r28
 25a:	af 5b       	subi	r26, 0xBF	; 191
 25c:	bf 4f       	sbci	r27, 0xFF	; 255
 25e:	01 90       	ld	r0, Z+
 260:	0d 92       	st	X+, r0
 262:	8a 95       	dec	r24
 264:	e1 f7       	brne	.-8      	; 0x25e <Pattern+0x5a>
 266:	8e 01       	movw	r16, r28
 268:	0f 5f       	subi	r16, 0xFF	; 255
 26a:	1f 4f       	sbci	r17, 0xFF	; 255
 26c:	7e 01       	movw	r14, r28
 26e:	81 e2       	ldi	r24, 0x21	; 33
 270:	e8 0e       	add	r14, r24
 272:	f1 1c       	adc	r15, r1
 274:	6e 01       	movw	r12, r28
 276:	91 e4       	ldi	r25, 0x41	; 65
 278:	c9 0e       	add	r12, r25
 27a:	d1 1c       	adc	r13, r1
 27c:	47 01       	movw	r8, r14

	for (int i = 0; i < sizeof(array)/sizeof(array[0]);i++)
	{
		PORTD = array[i];
		PORTB = array2[i];
		PORTF = array3[i];
 27e:	0f 2e       	mov	r0, r31
 280:	f2 e6       	ldi	r31, 0x62	; 98
 282:	af 2e       	mov	r10, r31
 284:	b1 2c       	mov	r11, r1
 286:	f0 2d       	mov	r31, r0
	int array2[] = {0b00000001,0b00000011,0b00000111,0b00001111,0b00011111,0b00111111,0b01111111,0b11111111,0b11111110,0b11111100,0b11111000,0b11110000,0b11100000,0b11000000,0b10000000,0b00000000};
	int array3[] = {0b00011000,0b00111100,0b01111110,0b11111111,0b11100111,0b11000011,0b10000001,0b00000000,0b10000001,0b11000011,0b11100111,0b11111111,0b01111110,0b00111100,0b00011000,0b00000000};

	for (int i = 0; i < sizeof(array)/sizeof(array[0]);i++)
	{
		PORTD = array[i];
 288:	f8 01       	movw	r30, r16
 28a:	80 81       	ld	r24, Z
 28c:	0e 5f       	subi	r16, 0xFE	; 254
 28e:	1f 4f       	sbci	r17, 0xFF	; 255
 290:	82 bb       	out	0x12, r24	; 18
		PORTB = array2[i];
 292:	f7 01       	movw	r30, r14
 294:	80 81       	ld	r24, Z
 296:	f2 e0       	ldi	r31, 0x02	; 2
 298:	ef 0e       	add	r14, r31
 29a:	f1 1c       	adc	r15, r1
 29c:	88 bb       	out	0x18, r24	; 24
		PORTF = array3[i];
 29e:	f6 01       	movw	r30, r12
 2a0:	80 81       	ld	r24, Z
 2a2:	f2 e0       	ldi	r31, 0x02	; 2
 2a4:	cf 0e       	add	r12, r31
 2a6:	d1 1c       	adc	r13, r1
 2a8:	f5 01       	movw	r30, r10
 2aa:	80 83       	st	Z, r24
		wait(50);
 2ac:	82 e3       	ldi	r24, 0x32	; 50
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	03 df       	rcall	.-506    	; 0xb8 <wait>
void Pattern(){
	int array[] = {0b00000001,0b00000011,0b00000111,0b00001111,0b00011111,0b00111111,0b01111111,0b11111111,0b01111111,0b00111111,0b00011111,0b00001111,0b00000111,0b00000011,0b00000001,0b00000000};
	int array2[] = {0b00000001,0b00000011,0b00000111,0b00001111,0b00011111,0b00111111,0b01111111,0b11111111,0b11111110,0b11111100,0b11111000,0b11110000,0b11100000,0b11000000,0b10000000,0b00000000};
	int array3[] = {0b00011000,0b00111100,0b01111110,0b11111111,0b11100111,0b11000011,0b10000001,0b00000000,0b10000001,0b11000011,0b11100111,0b11111111,0b01111110,0b00111100,0b00011000,0b00000000};

	for (int i = 0; i < sizeof(array)/sizeof(array[0]);i++)
 2b2:	08 15       	cp	r16, r8
 2b4:	19 05       	cpc	r17, r9
 2b6:	41 f7       	brne	.-48     	; 0x288 <Pattern+0x84>
		PORTD = array[i];
		PORTB = array2[i];
		PORTF = array3[i];
		wait(50);
	}
}
 2b8:	c0 5a       	subi	r28, 0xA0	; 160
 2ba:	df 4f       	sbci	r29, 0xFF	; 255
 2bc:	0f b6       	in	r0, 0x3f	; 63
 2be:	f8 94       	cli
 2c0:	de bf       	out	0x3e, r29	; 62
 2c2:	0f be       	out	0x3f, r0	; 63
 2c4:	cd bf       	out	0x3d, r28	; 61
 2c6:	df 91       	pop	r29
 2c8:	cf 91       	pop	r28
 2ca:	1f 91       	pop	r17
 2cc:	0f 91       	pop	r16
 2ce:	ff 90       	pop	r15
 2d0:	ef 90       	pop	r14
 2d2:	df 90       	pop	r13
 2d4:	cf 90       	pop	r12
 2d6:	bf 90       	pop	r11
 2d8:	af 90       	pop	r10
 2da:	9f 90       	pop	r9
 2dc:	8f 90       	pop	r8
 2de:	08 95       	ret

000002e0 <ChangePortValue>:


void ChangePortValue(int port, int bitchange){
	switch(port){
 2e0:	82 30       	cpi	r24, 0x02	; 2
 2e2:	91 05       	cpc	r25, r1
 2e4:	81 f0       	breq	.+32     	; 0x306 <ChangePortValue+0x26>
 2e6:	2c f4       	brge	.+10     	; 0x2f2 <ChangePortValue+0x12>
 2e8:	00 97       	sbiw	r24, 0x00	; 0
 2ea:	49 f0       	breq	.+18     	; 0x2fe <ChangePortValue+0x1e>
 2ec:	01 97       	sbiw	r24, 0x01	; 1
 2ee:	49 f0       	breq	.+18     	; 0x302 <ChangePortValue+0x22>
 2f0:	08 95       	ret
 2f2:	83 30       	cpi	r24, 0x03	; 3
 2f4:	91 05       	cpc	r25, r1
 2f6:	49 f0       	breq	.+18     	; 0x30a <ChangePortValue+0x2a>
 2f8:	04 97       	sbiw	r24, 0x04	; 4
 2fa:	49 f0       	breq	.+18     	; 0x30e <ChangePortValue+0x2e>
 2fc:	08 95       	ret
		case 0:	PORTA = bitchange;
 2fe:	6b bb       	out	0x1b, r22	; 27
		break;
 300:	08 95       	ret
		case 1:	PORTB = bitchange;
 302:	68 bb       	out	0x18, r22	; 24
		break;
 304:	08 95       	ret
		case 2:	PORTD = bitchange;
 306:	62 bb       	out	0x12, r22	; 18
		break;
 308:	08 95       	ret
		case 3:	PORTE = bitchange;
 30a:	63 b9       	out	0x03, r22	; 3
		break;
 30c:	08 95       	ret
		case 4:	PORTF = bitchange;
 30e:	60 93 62 00 	sts	0x0062, r22	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 312:	08 95       	ret

00000314 <FullLoop>:
		break;
	}
}


void FullLoop(){
 314:	cf 92       	push	r12
 316:	df 92       	push	r13
 318:	ef 92       	push	r14
 31a:	ff 92       	push	r15
 31c:	0f 93       	push	r16
 31e:	1f 93       	push	r17
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
	int amountofstrips = 5;
	int amountofleds = 8;
	for(int i = 0; i < amountofstrips*amountofleds; i++ ){
 324:	c0 e0       	ldi	r28, 0x00	; 0
 326:	d0 e0       	ldi	r29, 0x00	; 0
		int bitchange = 1 << (i%8);
 328:	ee 24       	eor	r14, r14
 32a:	e3 94       	inc	r14
 32c:	f1 2c       	mov	r15, r1
 32e:	ce 01       	movw	r24, r28
 330:	87 70       	andi	r24, 0x07	; 7
 332:	90 78       	andi	r25, 0x80	; 128
 334:	99 23       	and	r25, r25
 336:	24 f4       	brge	.+8      	; 0x340 <FullLoop+0x2c>
 338:	01 97       	sbiw	r24, 0x01	; 1
 33a:	88 6f       	ori	r24, 0xF8	; 248
 33c:	9f 6f       	ori	r25, 0xFF	; 255
 33e:	01 96       	adiw	r24, 0x01	; 1
 340:	9c 01       	movw	r18, r24
 342:	67 01       	movw	r12, r14
 344:	02 c0       	rjmp	.+4      	; 0x34a <FullLoop+0x36>
 346:	cc 0c       	add	r12, r12
 348:	dd 1c       	adc	r13, r13
 34a:	8a 95       	dec	r24
 34c:	e2 f7       	brpl	.-8      	; 0x346 <FullLoop+0x32>
		int strip = i/amountofleds;
 34e:	8e 01       	movw	r16, r28
 350:	dd 23       	and	r29, r29
 352:	14 f4       	brge	.+4      	; 0x358 <FullLoop+0x44>
 354:	09 5f       	subi	r16, 0xF9	; 249
 356:	1f 4f       	sbci	r17, 0xFF	; 255
 358:	15 95       	asr	r17
 35a:	07 95       	ror	r16
 35c:	15 95       	asr	r17
 35e:	07 95       	ror	r16
 360:	15 95       	asr	r17
 362:	07 95       	ror	r16
		if(i%amountofleds == 0){
 364:	23 2b       	or	r18, r19
 366:	29 f4       	brne	.+10     	; 0x372 <FullLoop+0x5e>
			ChangePortValue(strip-1,0);
 368:	60 e0       	ldi	r22, 0x00	; 0
 36a:	70 e0       	ldi	r23, 0x00	; 0
 36c:	c8 01       	movw	r24, r16
 36e:	01 97       	sbiw	r24, 0x01	; 1
 370:	b7 df       	rcall	.-146    	; 0x2e0 <ChangePortValue>
		}
		
		ChangePortValue(strip, bitchange);
 372:	b6 01       	movw	r22, r12
 374:	c8 01       	movw	r24, r16
 376:	b4 df       	rcall	.-152    	; 0x2e0 <ChangePortValue>
		wait(50);
 378:	82 e3       	ldi	r24, 0x32	; 50
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	9d de       	rcall	.-710    	; 0xb8 <wait>
		ChangePortValue(strip,0);
 37e:	60 e0       	ldi	r22, 0x00	; 0
 380:	70 e0       	ldi	r23, 0x00	; 0
 382:	c8 01       	movw	r24, r16
 384:	ad df       	rcall	.-166    	; 0x2e0 <ChangePortValue>


void FullLoop(){
	int amountofstrips = 5;
	int amountofleds = 8;
	for(int i = 0; i < amountofstrips*amountofleds; i++ ){
 386:	21 96       	adiw	r28, 0x01	; 1
 388:	c8 32       	cpi	r28, 0x28	; 40
 38a:	d1 05       	cpc	r29, r1
 38c:	81 f6       	brne	.-96     	; 0x32e <FullLoop+0x1a>
 38e:	c8 e2       	ldi	r28, 0x28	; 40
 390:	d0 e0       	ldi	r29, 0x00	; 0
		ChangePortValue(strip, bitchange);
		wait(50);
		ChangePortValue(strip,0);
	}
	for(int i = amountofstrips*amountofleds; i > 1; i--){
		int bitchange = 1 << (i%8);
 392:	ee 24       	eor	r14, r14
 394:	e3 94       	inc	r14
 396:	f1 2c       	mov	r15, r1
 398:	ce 01       	movw	r24, r28
 39a:	87 70       	andi	r24, 0x07	; 7
 39c:	90 78       	andi	r25, 0x80	; 128
 39e:	99 23       	and	r25, r25
 3a0:	24 f4       	brge	.+8      	; 0x3aa <FullLoop+0x96>
 3a2:	01 97       	sbiw	r24, 0x01	; 1
 3a4:	88 6f       	ori	r24, 0xF8	; 248
 3a6:	9f 6f       	ori	r25, 0xFF	; 255
 3a8:	01 96       	adiw	r24, 0x01	; 1
 3aa:	9c 01       	movw	r18, r24
 3ac:	67 01       	movw	r12, r14
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <FullLoop+0xa0>
 3b0:	cc 0c       	add	r12, r12
 3b2:	dd 1c       	adc	r13, r13
 3b4:	8a 95       	dec	r24
 3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <FullLoop+0x9c>
		int strip = i/amountofleds;
 3b8:	8e 01       	movw	r16, r28
 3ba:	dd 23       	and	r29, r29
 3bc:	14 f4       	brge	.+4      	; 0x3c2 <FullLoop+0xae>
 3be:	09 5f       	subi	r16, 0xF9	; 249
 3c0:	1f 4f       	sbci	r17, 0xFF	; 255
 3c2:	15 95       	asr	r17
 3c4:	07 95       	ror	r16
 3c6:	15 95       	asr	r17
 3c8:	07 95       	ror	r16
 3ca:	15 95       	asr	r17
 3cc:	07 95       	ror	r16
		if(i%amountofleds == 0){
 3ce:	23 2b       	or	r18, r19
 3d0:	29 f4       	brne	.+10     	; 0x3dc <FullLoop+0xc8>
			ChangePortValue(strip-1,0);
 3d2:	60 e0       	ldi	r22, 0x00	; 0
 3d4:	70 e0       	ldi	r23, 0x00	; 0
 3d6:	c8 01       	movw	r24, r16
 3d8:	01 97       	sbiw	r24, 0x01	; 1
 3da:	82 df       	rcall	.-252    	; 0x2e0 <ChangePortValue>
		}
		
		ChangePortValue(strip, bitchange);
 3dc:	b6 01       	movw	r22, r12
 3de:	c8 01       	movw	r24, r16
 3e0:	7f df       	rcall	.-258    	; 0x2e0 <ChangePortValue>
		wait(50);
 3e2:	82 e3       	ldi	r24, 0x32	; 50
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	68 de       	rcall	.-816    	; 0xb8 <wait>
		ChangePortValue(strip,0);
 3e8:	60 e0       	ldi	r22, 0x00	; 0
 3ea:	70 e0       	ldi	r23, 0x00	; 0
 3ec:	c8 01       	movw	r24, r16
 3ee:	78 df       	rcall	.-272    	; 0x2e0 <ChangePortValue>
		
		ChangePortValue(strip, bitchange);
		wait(50);
		ChangePortValue(strip,0);
	}
	for(int i = amountofstrips*amountofleds; i > 1; i--){
 3f0:	21 97       	sbiw	r28, 0x01	; 1
 3f2:	c1 30       	cpi	r28, 0x01	; 1
 3f4:	d1 05       	cpc	r29, r1
 3f6:	81 f6       	brne	.-96     	; 0x398 <FullLoop+0x84>
		
		ChangePortValue(strip, bitchange);
		wait(50);
		ChangePortValue(strip,0);
	}
}
 3f8:	df 91       	pop	r29
 3fa:	cf 91       	pop	r28
 3fc:	1f 91       	pop	r17
 3fe:	0f 91       	pop	r16
 400:	ff 90       	pop	r15
 402:	ef 90       	pop	r14
 404:	df 90       	pop	r13
 406:	cf 90       	pop	r12
 408:	08 95       	ret

0000040a <Testweek1>:


void Testweek1(){
	//	D,A,B,E,F AS OUTPUT	
	//  C AS INPUT
	DDRA = 0b11111111; 
 40a:	8f ef       	ldi	r24, 0xFF	; 255
 40c:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0b11111111; 
 40e:	87 bb       	out	0x17, r24	; 23
	DDRC = 0b10000000;
 410:	90 e8       	ldi	r25, 0x80	; 128
 412:	94 bb       	out	0x14, r25	; 20
	DDRD = 0b11111111; 
 414:	81 bb       	out	0x11, r24	; 17
	DDRE = 0b11111111; 
 416:	82 b9       	out	0x02, r24	; 2
	DDRF = 0b11111111;
 418:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	
	
	
	int state = 0;
 41c:	c0 e0       	ldi	r28, 0x00	; 0
 41e:	d0 e0       	ldi	r29, 0x00	; 0
	while(1){
		BlinkLedsSeperately();
 420:	5c de       	rcall	.-840    	; 0xda <BlinkLedsSeperately>
		LedButton();
 422:	85 de       	rcall	.-758    	; 0x12e <LedButton>
		LoopLight();
 424:	90 de       	rcall	.-736    	; 0x146 <LoopLight>
		state = States(state);
 426:	ce 01       	movw	r24, r28
 428:	bb de       	rcall	.-650    	; 0x1a0 <States>
 42a:	ec 01       	movw	r28, r24
		Pattern();
 42c:	eb de       	rcall	.-554    	; 0x204 <Pattern>
		FullLoop();
 42e:	72 df       	rcall	.-284    	; 0x314 <FullLoop>
	}
 430:	f7 cf       	rjmp	.-18     	; 0x420 <Testweek1+0x16>

00000432 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
 432:	08 95       	ret

00000434 <main>:

int main (void)
{
	/* Insert system clock initialization code here (sysclk_init()). */

	board_init();
 434:	fe df       	rcall	.-4      	; 0x432 <board_init>
	
	
	
	while (1)
	{
		Testweek1();
 436:	e9 df       	rcall	.-46     	; 0x40a <Testweek1>
		
	}
 438:	fe cf       	rjmp	.-4      	; 0x436 <main+0x2>

0000043a <_exit>:
 43a:	f8 94       	cli

0000043c <__stop_program>:
 43c:	ff cf       	rjmp	.-2      	; 0x43c <__stop_program>
