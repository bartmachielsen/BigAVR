
AVRPRojects.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000094  00800100  00000162  000001d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000162  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000026a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000029c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001026  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b00  00000000  00000000  000013ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001211  00000000  00000000  00001ece  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001ec  00000000  00000000  000030e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000114ea  00000000  00000000  000032cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000055f  00000000  00000000  000147b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00014d15  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00003cd8  00000000  00000000  00014da5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e6       	ldi	r30, 0x62	; 98
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 39       	cpi	r26, 0x94	; 148
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	52 d0       	rcall	.+164    	; 0x158 <main>
  b4:	54 c0       	rjmp	.+168    	; 0x15e <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <wait>:
#define SET_ONLY_BIT(var, pos) var = 1 << pos
#define CLEAR_ALL(var) var = 0

void wait(int ms)
{
	for (int i=0; i<ms; i++)
  b8:	18 16       	cp	r1, r24
  ba:	19 06       	cpc	r1, r25
  bc:	6c f4       	brge	.+26     	; 0xd8 <wait+0x20>
  be:	20 e0       	ldi	r18, 0x00	; 0
  c0:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	ef ec       	ldi	r30, 0xCF	; 207
  c4:	f7 e0       	ldi	r31, 0x07	; 7
  c6:	31 97       	sbiw	r30, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <wait+0xe>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <wait+0x14>
  cc:	00 00       	nop
  ce:	2f 5f       	subi	r18, 0xFF	; 255
  d0:	3f 4f       	sbci	r19, 0xFF	; 255
  d2:	28 17       	cp	r18, r24
  d4:	39 07       	cpc	r19, r25
  d6:	a9 f7       	brne	.-22     	; 0xc2 <wait+0xa>
  d8:	08 95       	ret

000000da <SevenSegment>:
	 {0b01000000,100},
	 {0b00000000,100},
 };
  
 void SevenSegment(int Display){
	if (Display>16)
  da:	81 31       	cpi	r24, 0x11	; 17
  dc:	91 05       	cpc	r25, r1
  de:	24 f0       	brlt	.+8      	; 0xe8 <SevenSegment+0xe>
	{
		PORTD = table[16].Byte;
  e0:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <table+0x40>
  e4:	82 bb       	out	0x12, r24	; 18
  e6:	08 95       	ret
	} else{
		PORTD = table[Display].Byte;
  e8:	88 0f       	add	r24, r24
  ea:	99 1f       	adc	r25, r25
  ec:	88 0f       	add	r24, r24
  ee:	99 1f       	adc	r25, r25
  f0:	fc 01       	movw	r30, r24
  f2:	e0 5b       	subi	r30, 0xB0	; 176
  f4:	fe 4f       	sbci	r31, 0xFE	; 254
  f6:	80 81       	ld	r24, Z
  f8:	82 bb       	out	0x12, r24	; 18
  fa:	08 95       	ret

000000fc <Testweek2>:
	}
 }

 void Testweek2(){ 
	DDRD = 0b11111111;
  fc:	8f ef       	ldi	r24, 0xFF	; 255
  fe:	81 bb       	out	0x11, r24	; 17
 100:	0f 2e       	mov	r0, r31
 102:	f2 e5       	ldi	r31, 0x52	; 82
 104:	ef 2e       	mov	r14, r31
 106:	f1 e0       	ldi	r31, 0x01	; 1
 108:	ff 2e       	mov	r15, r31
 10a:	f0 2d       	mov	r31, r0

	while(1){
		for(int i = 0; i <17; i++){
 10c:	81 2c       	mov	r8, r1
 10e:	91 2c       	mov	r9, r1
 110:	0f 2e       	mov	r0, r31
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	cf 2e       	mov	r12, r31
 116:	f1 e0       	ldi	r31, 0x01	; 1
 118:	df 2e       	mov	r13, r31
 11a:	f0 2d       	mov	r31, r0
 11c:	00 e5       	ldi	r16, 0x50	; 80
 11e:	11 e0       	ldi	r17, 0x01	; 1
 120:	57 01       	movw	r10, r14
 122:	c8 2d       	mov	r28, r8
 124:	d9 2d       	mov	r29, r9
			SevenSegment(i);
 126:	ce 01       	movw	r24, r28
 128:	d8 df       	rcall	.-80     	; 0xda <SevenSegment>
			wait(table[i].delay);
 12a:	f5 01       	movw	r30, r10
 12c:	80 81       	ld	r24, Z
 12e:	91 81       	ldd	r25, Z+1	; 0x01
 130:	c3 df       	rcall	.-122    	; 0xb8 <wait>

 void Testweek2(){ 
	DDRD = 0b11111111;

	while(1){
		for(int i = 0; i <17; i++){
 132:	21 96       	adiw	r28, 0x01	; 1
 134:	f4 e0       	ldi	r31, 0x04	; 4
 136:	af 0e       	add	r10, r31
 138:	b1 1c       	adc	r11, r1
 13a:	c1 31       	cpi	r28, 0x11	; 17
 13c:	d1 05       	cpc	r29, r1
 13e:	99 f7       	brne	.-26     	; 0x126 <Testweek2+0x2a>
 140:	e6 01       	movw	r28, r12
			SevenSegment(i);
			wait(table[i].delay);
		}
		for(int i = 0; i <20; i++){
			PORTD = FUN[i].Byte;
 142:	88 81       	ld	r24, Y
 144:	82 bb       	out	0x12, r24	; 18
			wait(FUN[i].delay);
 146:	8a 81       	ldd	r24, Y+2	; 0x02
 148:	9b 81       	ldd	r25, Y+3	; 0x03
 14a:	b6 df       	rcall	.-148    	; 0xb8 <wait>
 14c:	24 96       	adiw	r28, 0x04	; 4
	while(1){
		for(int i = 0; i <17; i++){
			SevenSegment(i);
			wait(table[i].delay);
		}
		for(int i = 0; i <20; i++){
 14e:	c0 17       	cp	r28, r16
 150:	d1 07       	cpc	r29, r17
 152:	b9 f7       	brne	.-18     	; 0x142 <Testweek2+0x46>
 154:	e5 cf       	rjmp	.-54     	; 0x120 <Testweek2+0x24>

00000156 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
 156:	08 95       	ret

00000158 <main>:

int main (void)
{
	/* Insert system clock initialization code here (sysclk_init()). */

	board_init();
 158:	fe df       	rcall	.-4      	; 0x156 <board_init>
	
	
	while (1)
	{
		//Testweek1();
		Testweek2();
 15a:	d0 df       	rcall	.-96     	; 0xfc <Testweek2>
	}
 15c:	fe cf       	rjmp	.-4      	; 0x15a <main+0x2>

0000015e <_exit>:
 15e:	f8 94       	cli

00000160 <__stop_program>:
 160:	ff cf       	rjmp	.-2      	; 0x160 <__stop_program>
